way to use react : 1. using react cdn- not recommended as it uses server link and the link might get down
 2. installing react 

⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
====Chapter-3 Igniting Apps =====

Dependencies version 
 version = "~8.1.3" "^8.1.3" "parcel": "^2.10.2"
During updates :
~version "parcel": "~2.10.2"	Approximately equivalent to version, i.e., only accept new patch versions
See npm semver - Tilde Ranges
^version : "parcel": "^2.10.2"	Compatible with version, i.e., accept new minor and patch versions

"parcel": "2.10.2"  Without any sign .version Must match version exactly and during upgrade it will use the defines version only
==========================

Donot keep node module in git repo as its very heavy

We can create the node module using package-lock.json and package.json file .so keeping node module is not required .
-------------

install react :
npm install react 
npm install react-dom

npx parcel index.html --> means execute parcel using index.html as entry point . and create a developemnt build
npx parcel build index.html ---> commad to make production build .
npx parcel build index.html --https --> enable http login ,norammly whne a projec tis build its built on http


npx means --> execute using npm .

never edit or change node modules or packet.json files 

.parcel cache file ---> parcel need some space for thier own requirement that is why they create cache file feature like :
    Hot Module relaoding 
    file watcher algorith - use to watch any changes in file and replicate the changes .

dist file --> create minification of the files .here parcel minified the files .

cache while developemnt (.parcel cache file) --> when we first build the project it take let say 3 sec but when you build the project again this time it will take just millisec this is bcs of caching while developemnt.parcel builds cache and can be used again for faster deployment .


parcel manages the port number eg http://localhost:1234 let say u create 2 project parcel will allot diffetrent port no to different project .

-  we should  put parcel.cache in git ignore .why?  bcs anything that is autogenerated is put under git ignore .

react is fast becasue it uses bundler(parcel and vite ) which provide feature like hot mudule reloading ,file wathc algorithm , bundling ,minification,image optimisation(image is heaviset thing in a code) , super fast build algorithm

======
Parcel doesnt do above task alone it take help from other dependencies as well like below 
and this is called "transitive dependencies"

REACT is dependent on parcel and parcel is dependent on other dependencies to get their task done .
package-lock.json file :

"node_modules/@parcel/core": {
      "version": "2.10.2",
      "resolved": "https://registry.npmjs.org/@parcel/core/-/core-2.10.2.tgz",
      "integrity": "sha512-c6hh13oYk9w5creiQ9yCz9GLQ17ZRMonULhJ46J0yoFArynVhNTJ9B5xVst7rS/chOTY8jU0jSdJuxQCR4fjkg==",
      "dev": true,
      "dependencies": {
        "@mischnic/json-sourcemap": "^0.1.0",
        "@parcel/cache": "2.10.2",
        "@parcel/diagnostic": "2.10.2",
        "@parcel/events": "2.10.2",
        "@parcel/fs": "2.10.2",
        "@parcel/graph": "3.0.2",
        "@parcel/logger": "2.10.2",
        "@parcel/package-manager": "2.10.2",
        "@parcel/plugin": "2.10.2",
        "@parcel/profiler": "2.10.2",
        "@parcel/rust": "2.10.2",
        "@parcel/source-map": "^2.1.1",
        "@parcel/types": "2.10.2",
        "@parcel/utils": "2.10.2",
        "@parcel/workers": "2.10.2",
        "abortcontroller-polyfill": "^1.1.9",
        "base-x": "^3.0.8",
        "browserslist": "^4.6.6",
        "clone": "^2.1.1",
        "dotenv": "^7.0.0",
        "dotenv-expand": "^5.1.0",
        "json5": "^2.2.0",
        "msgpackr": "^1.5.4",
        "nullthrows": "^1.1.1",
        "semver": "^7.5.2"

browserlist : help us make the older browser Compatible with our code 
https://browserslist.dev/?q=bGFzdCAyICB2ZXJzaW9ucw%3D%3D
  "browserlist" : [
    "last 2 chrome versions"
  ]

⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
  +++++++++++++++++++++++++++++++++
  CHAPTER 4 LAYING THE FOUNDATION
  +++++++++++++++++++++++++++++++++
  important :2hr:11min

  how react.createElement get converted and create createElement
    react.createElement ==>  it get created as Object ==> and then as  HTML(DOM)

  Babel plugin tranform remove console ---> removes console.log from code .parcel doesnot remove the console.log .
                                            npm install babel-plugin-transform-remove-console --save-dev
  
  JSX is HTML like syntax in Java script its not html syntax inside java script .
  Facebook developer developed JSX.
  Babel convert the written JSX to html format behind the scene .
  Babel comes along with 
  
   . When you instal parcel babel comes as a dependencies in parcel.



+++++++++++
  React Component :
   Two type of Component :
    functional component :new way of wrting codes.
    class based component: old way of writing codes.

    functional component are nothing but code written as function .
    function component are normal function.
     const headercomponent = () =>{

     };


     Any component the name should start with capital letters 

 ⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
     ********** CHAPTER-5 **********


     react fragment <> </> -- is component expotred when you to do ' import react from react '

     <react.fragment>
     </react.fragment>    or can be simply written as :

     <> 
     </>


     JSX can only have one parent .  


     we cannot do styling for fragment ,we need to create Div if we need to style .

     Config driven UI --> Let say u are makinf swiggy app the app which u would be using is same but the view for different cities will be different this diffeent view is build using config driven UI. 


   Reconsiliation {diff algorith} ---> The page DOM contain many branches and we need to make changes to one of the branches and not all so what diff algorith do is it check and reload(rerender) only the branches where changes were made and not all ,this process is call Reconsiliation and as onky required pages was loaded it makes react fast .
   and this is reason why KEY is used so that we can let code know which part need to be rerendered and not all DOM.
     React is fast becasue it has faster DOM manipulation because of diff algorith and Reconsiliation

   The algorithm react uses to diff one tree to another to determine which part need to be changed .

   virtual DOM is representaion of DOM ex how hearder ,body,div and sub div are present in our code 




⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
   ++++++++++++++++++++++
   6.Lets get hooked 
   ++++++++++++++++++++++

We have a file called header.js which contain header and title component.there are diff way to export and import 

Named import :
import {title} from "./component/header"

named export :
export default const title = () => {},

default import :it import everything from the file(i.e both title and header)
import header from "./component/header"

default export : it export everything from header.js file (i.e both title and header)
export default from "./component/header"

If you want to import everything there is another way :

import * as obj from "./component/header" --> everything is imported as name obj from .component/header

and to use this we can use : obj.Title (for using title component) or obj.header (for using header component)
****
React Hooks -->React hooks are nothing but functions .

const [ searchtext , usesearchtext] = useState('burger')

 returns like -->    [ searchtext(variable name ) , usesearchtext(function to update the variable)] = useState('burger'(is the initial/default value))
 ⭐
 TWO WAY BINDING -- THE HOOK support two way bidning means it read and update simulatenously read in usesearchtext and update update the searchtext

 WHY DO WE NEED STATE VARIABLES 
whenever we made any change in UI the same is not updated by react as react doesnot know what changes are being made  .By using state the UI and backend are in sync .it know what was changed and updates realtime.
but while using state react watches the chnages and it auto rerender .

Precautions :
useState is use to create local variable within the functional component .So never use the usestate outside functional component.

useState should not be used inside if-else ,for .

⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
****** 8.Explore the world *****

There can be two way to render the page :-->

1. Page loads --> call APi --> get response from api which might take 500ms .till this time the page renders nothing.

2.Page loads --> render something on page --> then call the API --> and API call will now update the UI.
2nd approach is good as it give good experience to user as it shows something to user first and then load the infor from API .whereas the first approach shows nothing for 500ms giving bad user experience.

1:15

1:29 - must go to understand useEffect dependencies

UseEffect --> work like callback function .It doesnot get called immiediatly but called when required .and react will make sure its called at specific time .
         Use effect is basically 1.render the page first ..2.then call the API and ..then3. Load the UI .
         this gives a better user experience . 

UseEffect( () => {console.log('render')} , [] ) 
[] here is dependencies

example :

UseEffect ( () => {console.log('render)}, [searchinput])

It means the useEffect i.e console.log('render') is dependent on dependencies ie [searchinput]
ie useEffect i.e console.log('render') will be called only when [searchinput] is called .

If dependencies are blank ,the useEffect will be called only once as its not dependent on anything now 


empty dependencies array  UseEffect ( () => {console.log('render)}, [])--> use effect is called once after render .
whne dependencies array[searchtext] is defined UseEffect ( () => {console.log('render)}, [searchinput]) --> use effect is called once after render + everytime after rerender(ie searchtext changes)

if no dependency array -- > UseEffect ( () => {console.log('render)}) --> use effect will be called after every render .

Noramlly at every page load function will call console.log('render') but we dont need ot to be called everytime .that is why we use Dependencies array [] .which enable our function to be called time we want .
UseEffect is nothing but a hook and hook is nothing but a function.

useEffect is called after the component is rerendered.


shimmer ui --> instead of loading loader UI use boxes so that it give good experience to users

2:17 conditional rendering .


99% of time I will use useState and useEffect hooks only .

⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
++++++++++++++++++++++++++++++++
9.FINDING THE PATH 
++++++++++++++++++++++++++++++++
use NPM extentions when you want to do some huge task the extentions u need not to do the coding .

FORMIK -- if u want to create forms.

npm i react-router-dom

in App.js 
import { createBrowserRouter ,Routerprovider } from "react-router-dom"; --> help us create routing .routerprovider provide route.

43:00 -- routing 

⭐⭐⭐⭐

react router dom is not created by meta but by Remix .

How to create Routing 👍

1 . import { createBrowserRouter ,Routerprovider } from "react-router-dom";

2. create createBrowserRouter with name as appRouter .this will define the list of  path i.e "/" and "about" 👍

const appRouter = createBrowserRouter ([
  {
    path : "/" ,
    element : < AppLayout />
    
  },

  {
    path : "about" ,
    element : < About />
    
  }
  
  ])


  3. Use Routerprovider to define the router in our case its appRouter .

  root.render(<RouterProvider router={appRouter} />);


  +++
  http://localhost:1234/about or http://localhost:1234

  will give the page but what if http://localhost:1234/xsdd and ambigous page is hit .DOM is so powerful that it doesnot give error but show page from DOM
  We can also design our own error page .

  ++++
  1:00:00
  import { useRouteError } from 'react-router'

  useRouteError is a hook .

  import { useRouteError } from 'react-router'
  it detect the error itself 

  here if we give incorrect URL the useRouteError is smart enough to detect the error and give in console.log 

  http://localhost:1234/about/kkxxcsdsdwdwd

const Error = () => {

    const err = useRouteError();
    console.log(err);
  return (
    <div>
        <h1>OOPS ! We have an Error</h1>
        <p>Something went Wrong !!</p>
        <h3> {err. statusText} + {err.status} <h3> 
    </div>
  )
}


if error page is like below we can use the codes to show in error page 
{err. statusText} + {err.status}

rror
: 
Error: No route matches URL "/ddd" at getInternalRouterError (http://localhost:1234/index.7271efb6.js:33836:61) at createRouter (http://localhost:1234/index.7271efb6.js:31528:21) at createBrowserRouter (http://localhost:1234/index.7271efb6.js:27925:37) at 2kQhy.react/jsx-dev-runtime (http://localhost:1234/index.7271efb6.js:2989:59) at newRequire (http://localhost:1234/index.7271efb6.js:71:24) at http://localhost:1234/index.7271efb6.js:122:5 at http://localhost:1234/index.7271efb6.js:145:3
internal
:true
status
: 
404

statusText
: 
"Not Found"
[[Prototype]]
: 
Object

1:20:00

SPA -single page application ==> When u click one thing it does not load whole page .

Problem with anchor tag is it refreshes the whole page .
<li> <href='/about'>About</li>

Two type of routing 👍
--------------------
 1.CLIENT side routing : new way ,clcik on about page it will go directly to page ,no need to go to server .in react we use this routing 
 2. server side routing : is way that all are pages come from server .(older way to laod page)


 How to use href in react we dont use href in react we use link to  👍

 Link is also developed by remix and bundled in react-router-dom .

 import { Link } from "react-router-dom";

 and then 
 <li> <Link to='/about'>About</Link></li>

 1:33:00 :Nested Routing 👍 :
1. import outlet from react-router-dom
import { createBrowserRouter , RouterProvider  , Outlet} from "react-router-dom";

2.define <Outlet/> --all the childeren will be called by outlet . 👍

 Whatever children in App "AppLayout" will be called by "Outlet"
const AppLayout = () => {
   return (
    <>
    
    <Header/>
    
   <Outlet/>
    <Footer/>
    </>
   )

 }

 3. Create children like below ⬇️

const appRouter = createBrowserRouter ([
  {
    path : "/" ,
    element : < AppLayout />,
    // element : <Body/>,
    errorElement : < Error/>,
    children : [
      {
        path : "about" ,
        element : < About />,
        // errorElement : < Error/>
        
      },
      
      {
        path : "contact" ,
        element : < Contact />,
        // errorElement : < Error/>
        
      }
    ]

    
  },

1:50:00 -- Dynamic Routing 👍

import {useParams} from 'react-router-dom' --> helps reading the id .It is hook .


⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐

10 .LETS GET CLASSY 

stopped wathing this at 1:16:00 🆎🆎

Class based component - when react started it was just classbased component .there was no function based component or hooks 
class based component are no longer in use as all new project use function or hook.
we can also create children of children .

'/' means of root .
25:00 very important .

if we created children of children then an outlet need to be created under the first children . 

classbased component : 
class Profile(name) extends React.component {
   render(){
      return <h1> axsdsdsddffdf <h1>
   }
}


two thing : 
1. Class based component are created diffrently : 
    class name extends react.component

2. render is Mandatory  .

⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
OPTIMIZING OUR APP (VIDEO -11)

create our own Hook : 
Questions : 

When do we build our own hook ? -->
Why do we build our own hook ? --> Reusabilty ,Readibity , Separation of conecern and maintainibity(as its easy to debug) .
How do we build our own hook ? -->

modularity - means whe have broken down our codes into meaningful pieces/chunks 

As self created hooks can be used many time at diff places its advisable to create a Separate folder ( generic way to name : utils, shared )

01:00:00 --> online/offline no internet 🔼

1:00:32 --> how to clean event listener cache .
       return () => {
   window.removeEventListener("online", handleOnline);
   window.removeEventListener("offline",handleOffline );
  }

1:53:00 --> LazyLoading 

small app are created as one bundle (i.e one index.js file) is created in browser but in case of big app if we budle everything in same file it will make our app slow .So we need to segregrate the file and load only when it is required .let say an app has multiple tab if we dont bufle the app in seperate budle all tab will load everytime which is not required hence we segrate the tab so that the page which is click get loaded others are not .
🌟🌟🌟🌟🌟🌟
This concept is called : chunking or codesplitting or or dynamic bundling or  or On demand loading or lazy loading.

How to do lazy loading 👍

Instead of importing like this 
import Instamart from "./component/Instamart";


we use dynamic import like this 👍
1.first import lazy from react library as named import
import React, { lazy } from "react";

2. lazy function under which u import and  define file path to lazy load 

const Instamart = lazy( ()=> import("./components/Instamart"))

* At first click on instamart it may give error as we have used lazy load here means it take time to load and create instamrt.js file and then load .but when it loaded once the load will be instant becuse now the instamart.js file is part of SPA(single page application)

On react load it will suspend the loading .How to stop this happening ????

We use 'Suspense'
import React, { lazy,Suspense } from "react";

and then wrap it inside Suspense 

 {
        path : "/Instamart" ,
        element :<Suspense><Instamart/></Suspense> ,
      }

we can also show shimmer when loading ,In lazy laoding and suspense its called fallback and can be used like this 👍

 {
        path : "/Instamart" ,
        element :<Suspense fallback = 'shimmer message'><Instamart/></Suspense> ,
      }
     if u just want to put a text

      or if u want to call component shimmer like .....
      {
        path : "/Instamart" ,
        element :<Suspense fallback = {<Shimmer/>}><Instamart/></Suspense> ,
      }




⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
12- JO DIKHTA HAI WO BIKTA HAI 
 ( desiging using tailwind CSS)

 why use CSS frameworks 👍
 save time .
 To write optimised CSS .

way to create css:
 1.Native way of writng css : crate a .css file and do css there 
 2.scss

 3.
 Other way is create inline CSS i.e write CSS in same line in component page .(resuabity and repeatibity is issue  bcs css are wrtitten in line and cant be repeated .
 )
⭐⭐
 4.Use  Component Library like ... material UI ,ANT UI ,base UI,CHAKRA UI 
   these library are nothing but packages ,so u can use multiple CSS library in on e project .
   pro and cons of library UI :
   😀PROS - easy to use , reusable ,auto theameing , give buitl in component ,give consitent UI .make developement fast 

   😃 CONS: make bundle size heavy, we loose control over how my CSS ,personal customisation become hard .


5.Styled Component :

6. Taiwind CSS Framework
  starts at 01:05:00 ⏱️
   its open source css framework.
   
   PROs:
   CSS on go ie html and css on same line 
   reusabilty .
   less bundle size .
   Flexible UI - means very much customisable which was major con of material UI .

   installing : https://tailwindcss.com/docs/installation
    
    Either install the tailwind CSS as npm package or derectly put CDN link in index.html file 

    Tailwind css works just with className .Ex: 
    <h1 class="text-3xl font-bold underline">
      Hello world!
    </h1>

    Using CDN is not good way as in case cdn is down it will impact the page .
  😀
    How to install tailwind using npm package ? 
    Instaaltion for parcel :https://tailwindcss.com/docs/guides/parcel


    npm install -D tailwindcss postcss   --> -D is dev dependency and along with tailwind postcss installation is also required post css is used for compilation means it will convert all tailwind css to noraml css 
    npx tailwindcss init  --> initialising project to use css 

    instation will be seen in packet.json file .

     "devDependencies": {
    "@babel/core": "^7.23.3",
    "babel-plugin-transform-remove-console": "^6.9.4",
    "parcel": "^2.10.2",
    "postcss": "^8.4.33",
    "process": "^0.11.10",
    "tailwindcss": "^3.4.1"
  },
 ⭐⭐⭐⭐⭐⭐⭐⭐
  And when we run npx tailwindcss init  .this command will create tailwind.config.js file .This is the file where we do our configurations

  In tailwind.config.js file add below  under content 👍 so basicially add all file with html,js,ts,jsx,tsx} extention as part of tailwind .

  /** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{html,js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


In Index.css remove all the CSS and just add belwo 3 line 
@tailwind base;
@tailwind components;
@tailwind utilities;


Once saved we will not be using our index.html file for CSS .

After installing reload the project -- npx parcel index.html


Install etention "Tailwind CSS IntelliSense" --> for autosuggest 
😄😃
IF tailiwind doesnot show auto suggestion do "CRTL + SPACEBAR"

😄😃
Noramlly Tailwind CSS has pre defined spec but what if we need the size or dimension per our required .Then we use ome thing called SQUARE-BRACKET-NOTATION .

HOW TO USE : LEt say in tailwindcss we use <div className="w-52">  in squre bracket notaion we can use like <div className="w-[..here put any dynamic value]"> like <div className="w-[200px]">

cool thing : tailiwindCSS ony ship the command which you used let say "w-20" "bg-500" not all components which save lot of space in CSS file and make css file very small .

Incase of dynamic value"> like <div className="w-[200px]">  it create a seprate dynamic class under css file 

How to fine css file -- Browser - inspect - Network - relaod the page and it will show the css file 


HOW to write media Query using taiwind CSS :
<div className="flex justify-between bg-red-200 shadow-lg sm:bg-purple-900 md:bg-orange-500">

sm fro smal device .md from medium device .

=======
PRO AND CONS OD TAILWIND (INTERVIEW )

PRO 👍
EASY debug
less code 
easy to use 
no dplicate css 
small biudnle size
fast developement
easy debug
much more customise 
lot more control 
dont have to move to other file as everything is done under .js file


CONS 👎
to much classes 
to much code
there is inital learning curve involved .





















