way to use react : 1. using react cdn- not recommended as it uses server link and the link might get down
 2. installing react 

====Chapter-3 Igniting Apps =====

Dependencies version 
 version = "~8.1.3" "^8.1.3" "parcel": "^2.10.2"
During updates :
~version "parcel": "~2.10.2"	Approximately equivalent to version, i.e., only accept new patch versions
See npm semver - Tilde Ranges
^version : "parcel": "^2.10.2"	Compatible with version, i.e., accept new minor and patch versions

"parcel": "2.10.2"  Without any sign .version Must match version exactly and during upgrade it will use the defines version only
==========================

Donot keep node module in git repo as its very heavy

We can create the node module using package-lock.json and package.json file .so keeping node module is not required .
-------------

install react :
npm install react 
npm install react-dom

npx parcel index.html --> means execute parcel using index.html as entry point . and create a developemnt build
npx parcel build index.html ---> commad to make production build .
npx parcel build index.html --https --> enable http login ,norammly whne a projec tis build its built on http


npx means --> execute using npm .

never edit or change node modules or packet.json files 

.parcel cache file ---> parcel need some space for thier own requirement that is why they create cache file feature like :
    Hot Module relaoding 
    file watcher algorith - use to watch any changes in file and replicate the changes .

dist file --> create minification of the files .here parcel minified the files .

cache while developemnt (.parcel cache file) --> when we first build the project it take let say 3 sec but when you build the project again this time it will take just millisec this is bcs of caching while developemnt.parcel builds cache and can be used again for faster deployment .


parcel manages the port number eg http://localhost:1234 let say u create 2 project parcel will allot diffetrent port no to different project .

-  we should  put parcel.cache in git ignore .why?  bcs anything that is autogenerated is put under git ignore .

react is fast becasue it uses bundler(parcel and vite ) which provide feature like hot mudule reloading ,file wathc algorithm , bundling ,minification,image optimisation(image is heaviset thing in a code) , super fast build algorithm

======
Parcel doesnt do above task alone it take help from other dependencies as well like below 
and this is called "transitive dependencies"

REACT is dependent on parcel and parcel is dependent on other dependencies to get their task done .
package-lock.json file :

"node_modules/@parcel/core": {
      "version": "2.10.2",
      "resolved": "https://registry.npmjs.org/@parcel/core/-/core-2.10.2.tgz",
      "integrity": "sha512-c6hh13oYk9w5creiQ9yCz9GLQ17ZRMonULhJ46J0yoFArynVhNTJ9B5xVst7rS/chOTY8jU0jSdJuxQCR4fjkg==",
      "dev": true,
      "dependencies": {
        "@mischnic/json-sourcemap": "^0.1.0",
        "@parcel/cache": "2.10.2",
        "@parcel/diagnostic": "2.10.2",
        "@parcel/events": "2.10.2",
        "@parcel/fs": "2.10.2",
        "@parcel/graph": "3.0.2",
        "@parcel/logger": "2.10.2",
        "@parcel/package-manager": "2.10.2",
        "@parcel/plugin": "2.10.2",
        "@parcel/profiler": "2.10.2",
        "@parcel/rust": "2.10.2",
        "@parcel/source-map": "^2.1.1",
        "@parcel/types": "2.10.2",
        "@parcel/utils": "2.10.2",
        "@parcel/workers": "2.10.2",
        "abortcontroller-polyfill": "^1.1.9",
        "base-x": "^3.0.8",
        "browserslist": "^4.6.6",
        "clone": "^2.1.1",
        "dotenv": "^7.0.0",
        "dotenv-expand": "^5.1.0",
        "json5": "^2.2.0",
        "msgpackr": "^1.5.4",
        "nullthrows": "^1.1.1",
        "semver": "^7.5.2"

browserlist : help us make the older browser Compatible with our code 
https://browserslist.dev/?q=bGFzdCAyICB2ZXJzaW9ucw%3D%3D
  "browserlist" : [
    "last 2 chrome versions"
  ]


  +++++++++++++++++++++++++++++++++
  CHAPTER 4 LAYING THE FOUNDATION
  +++++++++++++++++++++++++++++++++
  important :2hr:11min

  how react.createElement get converted and create createElement
    react.createElement ==>  it get created as Object ==> and then as  HTML(DOM)

  Babel plugin tranform remove console ---> removes console.log from code .parcel doesnot remove the console.log .
                                            npm install babel-plugin-transform-remove-console --save-dev
  
  JSX is HTML like syntax in Java script its not html syntax inside java script .
  Facebook developer developed JSX.
  Babel convert the written JSX to html format behind the scene .
  Babel comes along with 
  
   . When you instal parcel babel comes as a dependencies in parcel.



+++++++++++
  React Component :
   Two type of Component :
    functional component :new way of wrting codes.
    class based component: old way of writing codes.

    functional component are nothing but code written as function .
    function component are normal function.
     const headercomponent = () =>{

     };


     Any component the name should start with capital letters 


     ********** CHAPTER-5 **********


     react fragment <> </> -- is component expotred when you to do ' import react from react '

     <react.fragment>
     </react.fragment>    or can be simply written as :

     <> 
     </>


     JSX can only have one parent .  


     we cannot do styling for fragment ,we need to create Div if we need to style .

     Config driven UI --> Let say u are makinf swiggy app the app which u would be using is same but the view for different cities will be different this diffeent view is build using config driven UI. 


   Reconsiliation {diff algorith} ---> The page DOM contain many branches and we need to make changes to one of the branches and not all so what diff algorith do is it check and reload(rerender) only the branches where changes were made and not all ,this process is call Reconsiliation and as onky required pages was loaded it makes react fast .
   and this is reason why KEY is used so that we can let code know which part need to be rerendered and not all DOM.
     React is fast becasue it has faster DOM manipulation because of diff algorith and Reconsiliation

   The algorithm react uses to diff one tree to another to determine which part need to be changed .

   virtual DOM is representaion of DOM ex how hearder ,body,div and sub div are present in our code 





   ++++++++++++++++++++++
   6.Lets get hooked 
   ++++++++++++++++++++++

We have a file called header.js which contain header and title component.there are diff way to export and import 

Named import :
import {title} from "./component/header"

named export :
export default const title = () => {},

default import :it import everything from the file(i.e both title and header)
import header from "./component/header"

default export : it export everything from header.js file (i.e both title and header)
export default from "./component/header"

If you want to import everything there is another way :

import * as obj from "./component/header" --> everything is imported as name obj from .component/header

and to use this we can use : obj.Title (for using title component) or obj.header (for using header component)
****
React Hooks -->React hooks are nothing but functions .

const [ searchtext , usesearchtext] = useState('burger')

 returns like -->    [ searchtext(variable name ) , usesearchtext(function to update the variable)] = useState('burger'(is the initial/default value))

 TWO WAY BINDING -- THE HOOK support two way bidning means it read and update simulatenously read in usesearchtext and update update the searchtext

 WHY DO WE NEED STATE VARIABLES 
whenever we made any change in UI the same is not updated by react as react doesnot know what changes are being made  .By using state the UI and backend are in sync .it know what was changed and updates realtime.
but while using state react watches the chnages and it auto rerender .

****** 8.Explore the world *****

There can be two way to render the page :-->

1. Page loads --> call APP --> get response from api which might take 500ms .till this time the page renders nothing.

2.Page loads --> render something on page --> then call the API --> and API call will now update the UI.
2nd approach is good as it give good experience to user as it shows something to user first and then load the infor from API .whereas the first approach shows nothing for 500ms giving bad user experience.

1:15

1:29 - must go to understand useEffect dependencies

UseEffect --> work like callback function .It doesnot get called immiediatly but called when required .and react will make sure its called at specific time .
         Use effect is basically 1.render the page first ..2.then call the API and ..then3. Load the UI .
         this gives a better user experience . 

UseEffect( () => {console.log('render')} , [] ) 
[] here is dependencies

example :

UseEffect ( () => {console.log('render)}, [searchinput])

It means the useEffect i.e console.log('render') is dependent on dependencies ie [searchinput]
ie useEffect i.e console.log('render') will be called only when [searchinput] is called .

If dependencies are blank ,the useEffect will be called only once as its not dependent on anything now 


empty dependencies array --> use effect is called once after render .
whne dependencies array[searchtext] is defined --> use effect is called once after render + everytime after rerender(ie searchtext changes)

Noramlly at every page load function will call console.log('render') but we dont need ot to be called everytime .that is why we use Dependencies array [] .which enable our function to be called time we want .
UseEffect is nothing but a hook and hook is nothing but a function.


shimmer ui --> instead of loading loader UI use boxes so that it give good experience to users





